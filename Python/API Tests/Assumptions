First off, thank you for giving me the opportunity to be considered for Fooda's Internship!
You'll find the necessary keys, tokens, and source in the folder

Necessary packages to run utility:
    Tweepy

To utilize the CLI, please follow the maximum allowed tweet count and query count:
    Max Tweet Count: 20
    Max Query Count: 15 per hour

Assumptions:
    - This CLI will have to utilize a string and integer argument, respectively.
    - The user is using Python 2.7 (most common enviro of twitter API user)
    - The user will want to view a likely range of 1 to 10 tweets, but may request more.
    - The user may write the twitter handle without an '@' symbol
    - The user may not know how to authorize the app, and will need to be URL-directed.
    - The tweets may or may not have unicode characters supported in the user enviro.
    - The user only wants tweets, so no need to include extra info like retweet counts.
    - The user understands how to use the command line and may utilize help flags.

Decisions:
    Package(s): I chose to use Tweepy instead of the direct twitter package because it
    is recognized as one of the best wrappers for Twitter, via mentions on their site,
    and the fact that it allows for better integration with other packages.

    I/O: To parse arguments, instead of directly using sys.argv I chose to use the argparse
    package. It is useful for providing the user with plenty of resources for handling
    ambiguous programs and arguments, plus it allows you to have a personalized readme
    on the command line.
    I grabbed the user's PIN input using raw_input() because they likely are using py2.7,
    which also is specifically what Tweepy is built in. I also decided to have an output
    file instead of simply pushing the auth tokens through the program. This allows the
    user to modify the program with hardcoded auth tokens instead of constantly being
    redirected to URLs.